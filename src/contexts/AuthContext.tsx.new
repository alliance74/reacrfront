import { createContext, useContext, useEffect, useState, useCallback, ReactNode } from 'react';
import { useNavigate } from 'react-router-dom';

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000/api';

export interface User {
  uid: string;
  email: string;
  displayName?: string | null;
  photoURL?: string | null;
  metadata?: {
    creationTime?: string;
    lastSignInTime?: string;
  };
}

interface AuthResponse {
  user: User;
  token: string;
  message: string;
}

interface AuthContextType {
  currentUser: User | null;
  login: (email: string, password: string) => Promise<AuthResponse>;
  signup: (email: string, password: string, displayName: string, referredBy?: string) => Promise<AuthResponse>;
  logout: () => Promise<void>;
  getToken: () => Promise<string | null>;
  loading: boolean;
  initialAuthCheckComplete: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}

export function AuthProvider({ children }: { children: ReactNode }) {
  const [currentUser, setCurrentUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [initialAuthCheckComplete, setInitialAuthCheckComplete] = useState(false);
  const navigate = useNavigate();
  
  const updateAuthState = useCallback(async (user: User | null) => {
    setCurrentUser(user);
    if (user) {
      localStorage.setItem('currentUser', JSON.stringify(user));
    } else {
      localStorage.removeItem('currentUser');
    }
  }, []);

  const signup = useCallback(async (email: string, password: string, displayName: string, referredBy?: string): Promise<AuthResponse> => {
    try {
      const response = await fetch('http://localhost:5000/api/auth/register', {
        method: 'POST',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify({
          email,
          password,
          displayName,
          ...(referredBy && { referredBy })
        })
      });

      const responseData = await response.json();
      
      if (!response.ok) {
        throw new Error(responseData.message || 'Registration failed');
      }

      if (responseData.data?.user) {
        await updateAuthState(responseData.data.user);
        return {
          user: responseData.data.user,
          token: responseData.data.token,
          message: responseData.message || 'Registration successful'
        };
      }
      
      throw new Error('Invalid response format from server');
    } catch (error) {
      console.error('Signup error:', error);
      throw error;
    }
  }, [updateAuthState]);

  const login = useCallback(async (email: string, password: string): Promise<AuthResponse> => {
    try {
      setLoading(true);
      const response = await fetch(`${API_URL}/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Login failed');
      }
      
      const data = await response.json();
      localStorage.setItem('token', data.token);
      await updateAuthState(data.user);
      
      return data;
    } catch (error) {
      console.error('Login error:', error);
      throw error;
    } finally {
      setLoading(false);
    }
  }, [updateAuthState]);

  const logout = useCallback(async (): Promise<void> => {
    try {
      setLoading(true);
      await fetch(`${API_URL}/auth/logout`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
    } catch (error) {
      console.error('Logout error:', error);
    } finally {
      localStorage.removeItem('token');
      await updateAuthState(null);
      setLoading(false);
      navigate('/login');
    }
  }, [navigate, updateAuthState]);

  const getToken = useCallback(async (): Promise<string | null> => {
    return localStorage.getItem('token');
  }, []);

  useEffect(() => {
    const checkAuth = async () => {
      try {
        setLoading(true);
        const token = localStorage.getItem('token');
        if (token) {
          const response = await fetch(`${API_URL}/auth/me`, {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          });
          
          if (response.ok) {
            const userData = await response.json();
            await updateAuthState(userData);
          } else {
            await updateAuthState(null);
          }
        }
      } catch (error) {
        console.error('Auth check failed:', error);
        await updateAuthState(null);
      } finally {
        setLoading(false);
        setInitialAuthCheckComplete(true);
      }
    };
    
    checkAuth();
  }, [updateAuthState]);

  const value = {
    currentUser,
    login,
    signup,
    logout,
    getToken,
    loading,
    initialAuthCheckComplete,
  } as const;
  
  useEffect(() => {
    console.log('Auth state updated:', { 
      currentUser: currentUser ? 'Authenticated' : 'Not authenticated',
      loading,
      initialAuthCheckComplete
    });
  }, [currentUser, loading, initialAuthCheckComplete]);

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}
